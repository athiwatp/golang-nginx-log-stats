# nginx host so we can create live log source
web:
  image: nginx:alpine
  volumes:
   - ./web/nginx.conf:/etc/nginx/nginx.conf:ro
   - ./web/nginx.conf.d:/etc/nginx/conf.d:ro
   - ./web/docroot:/usr/share/nginx/html:ro
   - ./ssl/www.example.com.crt:/etc/nginx/www.example.com.crt:ro
   - ./ssl/www.example.com.key:/etc/nginx/www.example.com.key:ro
   - /var/log/nginx
  # remove access.log symlink to stdout so we can parse on the backend
  command: sh -c "unlink /var/log/nginx/access.log && nginx -g \"daemon off;\" -c /etc/nginx/nginx.conf"
  ports:
   - 80
   - 443

# dump tcp proxy, changes $remote_addr on nginx logs
# gatling tests randomly select between web and proxy
proxy:
  image: nginx:alpine
  volumes:
   - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
  links:
   - web:web
  ports:
   - 80

# runs a defined simulation to create live logs on the nginx server
gatling:
  image: denvazh/gatling:2.1.7
  volumes:
   - ./gatling/simulations:/opt/gatling/user-files/simulations:ro
   - ./gatling/results:/opt/gatling/results
  links:
   - web:web
   - proxy:proxy
  # keep container running for manual tests it also avoids issue where containers close if run in foreground
  # sleep upfront to give a chance for the rest of the services to initialize
  command: sh -c "sleep 5s && gatling.sh -sf /opt/gatling/user-files/simulations/ -m && sleep infinity"
#to debug gatling container  command: sleep infinity

# lets us graph the statsd metric
# rely on supervisord to add graphite source on start https://github.com/grafana/grafana/issues/1789
# preferably with some default dashboard for the 5 stats
statsd:
  image: kamon/grafana_graphite
  volumes:
   - ./statsd/run_once.supervisord.conf:/etc/supervisor/conf.d/run_once.conf:ro
   - ./statsd/set_graphite_datasource.sh:/root/set_graphite_datasource.sh:ro
   - ./statsd/httpstats.dashboard.json:/src/dashboards/httpstats.json:ro
  ports:
   - 80
   - 81
   - 8125/udp
   - 8126

# runs the golang program to watch the nginx log file
nginxstats:
  image: golang:alpine
  volumes_from:
   - web
  volumes:
   - ./golangstats:/go:ro
  command: go run /go/nginxstatsd.go -publishStatsd
  links:
   - statsd:statsd
  # go tries to run its own nslookup which will bypass /etc/hosts
  # force it to use cgo so it finds the statsd address defined by docker
  environment:
   - GODEBUG=netdns=cgo
